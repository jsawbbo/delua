--- lua-5.4.7/src/lua.c	2024-06-14 00:15:10.000000000 +0200
+++ delua/lua/src/lua.c	2024-08-12 09:10:02.879904541 +0200
@@ -21,8 +21,8 @@
 #include "lualib.h"
 
 
-#if !defined(LUA_PROGNAME)
-#define LUA_PROGNAME		"lua"
+#if !defined(LUA_NAME)
+#define LUA_NAME		"lua"
 #endif
 
 #if !defined(LUA_INIT_VAR)
@@ -34,7 +34,7 @@
 
 static lua_State *globalL = NULL;
 
-static const char *progname = LUA_PROGNAME;
+static const char *progname = LUA_NAME;
 
 
 #if defined(LUA_USE_POSIX)   /* { */
@@ -442,11 +442,136 @@
 
 #include <readline/readline.h>
 #include <readline/history.h>
-#define lua_initreadline(L)	((void)L, rl_readline_name="lua")
+
+static lua_State *rl_lua = NULL;
+
+static const char *findsep(const char *text, int maxlen) {
+  int i = 0;
+  while (text[i] && (i < maxlen)) {
+    if ((text[i] == '.') || (text[i] == ':'))
+      return text + i;
+    i = i + 1;
+  }
+  return NULL;
+}
+
+static const char *findrsep(const char *text) {
+  int i = strlen(text);
+  while (i > 0) {
+    if ((text[i - 1] == '.') || (text[i - 1] == ':'))
+      return text + i - 1;
+    i = i - 1;
+  }
+  return NULL;
+}
+
+static char *generator(const char *text, int state) {
+  static const char *match;
+  static size_t nmatch;
+  static int top;
+
+  if (state == 0) {
+    top = lua_gettop(rl_lua);
+    lua_getglobal(rl_lua, "_G");
+
+    match = findrsep(text);
+    if (!match)
+      match = text;
+    else
+      match = match + 1;
+    nmatch = strlen(match);
+
+    const char *begin = text;
+    while (begin < match) {
+      const char *next = findsep(begin, match - 1 - begin);
+      if (!next)
+        next = match - 1;
+
+      lua_pushlstring(rl_lua, begin, next - begin);
+      if (lua_gettable(rl_lua, -2) != LUA_TTABLE)
+        goto invalid_completion;
+
+      begin = next + 1;
+    }
+
+    lua_pushnil(rl_lua);
+  }
+
+next_entry:
+  if (lua_next(rl_lua, -2)) {
+    switch (lua_type(rl_lua, -2)) {
+    case LUA_TSTRING: {
+      const char *k = lua_tostring(rl_lua, -2);
+      lua_pop(rl_lua, 1);
+      if (0 == memcmp(k, match, nmatch)) {
+        luaL_Buffer B;
+        luaL_buffinit(rl_lua, &B);
+        luaL_addlstring(&B, text, match - text);
+        luaL_addstring(&B, k);
+        luaL_pushresult(&B);
+
+        char *res = strdup(lua_tostring(rl_lua, -1));
+        lua_pop(rl_lua, 1);
+        return res;
+      }
+      goto next_entry;
+    }
+    default:
+      lua_pop(rl_lua, 1);
+      goto next_entry;
+    }
+  }
+
+invalid_completion:
+  lua_settop(rl_lua, top);
+  return NULL;
+}
+
+static char **completion(const char *text, int start, int end) {
+  rl_attempted_completion_over = 1;
+  rl_completion_append_character = '\0';
+  // rl_completion_display_matches_hook = FIXME
+  return rl_completion_matches(text, generator);
+}
+
+static void lua_initreadline(lua_State *L) {
+  rl_lua = L;
+  rl_readline_name = "lua";
+#if defined(LUA_USE_TABCOMPLETION)
+  rl_attempted_completion_function = completion;
+#endif
+}
+
 #define lua_readline(L,b,p)	((void)L, ((b)=readline(p)) != NULL)
 #define lua_saveline(L,line)	((void)L, add_history(line))
 #define lua_freeline(L,b)	((void)L, free(b))
 
+#define LUA_HISTORY_FILE ".lua-history"
+
+void lua_readhistory(lua_State *L) {
+  luaL_Buffer histfile;
+  luaL_buffinit(L, &histfile);
+  luaL_addstring(&histfile, getenv("HOME"));
+  luaL_addchar(&histfile, '/');
+  luaL_addstring(&histfile, LUA_HISTORY_FILE);
+  luaL_addchar(&histfile, '\0');
+
+  stifle_history(1024);
+  read_history(luaL_buffaddr(&histfile));
+  lua_pop(L, 1);
+}
+
+void lua_writehistory(lua_State *L) {
+  luaL_Buffer histfile;
+  luaL_buffinit(L, &histfile);
+  luaL_addstring(&histfile, getenv("HOME"));
+  luaL_addchar(&histfile, '/');
+  luaL_addstring(&histfile, LUA_HISTORY_FILE);
+  luaL_addchar(&histfile, '\0');
+  write_history(luaL_buffaddr(&histfile));
+  lua_pop(L, 1);
+}
+
 #else				/* }{ */
 
 #define lua_initreadline(L)  ((void)L)
@@ -455,6 +580,8 @@
         fgets(b, LUA_MAXINPUT, stdin) != NULL)  /* get line */
 #define lua_saveline(L,line)	{ (void)L; (void)line; }
 #define lua_freeline(L,b)	{ (void)L; (void)b; }
+#define lua_readhistory(L) ((void)L)
+#define lua_writehistory(L) ((void)L)
 
 #endif				/* } */
 
@@ -659,7 +786,9 @@
   else if (script < 1 && !(args & (has_e | has_v))) { /* no active option? */
     if (lua_stdin_is_tty()) {  /* running in interactive mode? */
       print_version();
+      lua_readhistory(L);  /* read history */
       doREPL(L);  /* do read-eval-print loop */
+      lua_writehistory(L); /* write history */
     }
     else dofile(L, NULL);  /* executes stdin as a file */
   }
