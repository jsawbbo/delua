diff --git a/lua/src/loadlib.c b/lua/src/loadlib.c
index 6d289fc..a4ae429 100644
--- a/lua/src/loadlib.c
+++ b/lua/src/loadlib.c
@@ -468,6 +468,25 @@ static void pusherrornotfound (lua_State *L, const char *path) {
   luaL_pushresult(&b);
 }
 
+/*
+** Expand the home mark.
+** Returns 1 if expanded and string on the stack, 0 otherwise.
+** (in-officially export for use with pam)
+*/
+LUA_API int lua_expandhome(lua_State *L, const char *filename) {
+  luaL_Buffer b;
+  if (*filename != *LUA_HOME_MARK)
+    return 0;
+  luaL_buffinit(L, &b);
+#if defined(LUA_USE_WINDOWS)
+    luaL_addstring(&b, getenv("USERPROFILE"));
+#else
+    luaL_addstring(&b, getenv("HOME"));
+#endif
+  luaL_addstring(&b, filename+1);
+  luaL_pushresult(&b);
+  return 1;
+}
 
 static const char *searchpath (lua_State *L, const char *name,
                                              const char *path,
@@ -487,7 +506,14 @@ static const char *searchpath (lua_State *L, const char *name,
   pathname = luaL_buffaddr(&buff);  /* writable list of file names */
   endpathname = pathname + luaL_bufflen(&buff) - 1;
   while ((filename = getnextfilename(&pathname, endpathname)) != NULL) {
-    if (readable(filename))  /* does file exist and is readable? */
+    if (lua_expandhome(L, filename)) {  /* expand home mark? */
+      filename = lua_tostring(L, -1);
+      if (readable(filename))  /* does file exist and is readable? */
+        return filename;  /* return name */
+      else
+        lua_pop(L, 1);  /* cleanup stack if not readable */
+    }
+    else if (readable(filename))  /* does file exist and is readable? */
       return lua_pushstring(L, filename);  /* save and return name */
   }
   luaL_pushresult(&buff);  /* push path to create error message */
