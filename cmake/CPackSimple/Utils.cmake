macro(cpack_simple_set outvar)
	if(${outvar} STREQUAL VARIABLES)
		math(EXPR __cps_N "${ARGC}-1")
		foreach(k RANGE 1 ${__cps_N} 2)
			math(EXPR v "${k}+1")
			
			set(args ${ARGV})
			list(GET args ${k} __cps_key)
			list(GET args ${v} __cps_value)
			cpack_simple_set(${__cps_key} ${__cps_value})
		endforeach()
	else()
		set(${outvar} ${ARGN})
		
		if(__cpack_simple_report)
			message(STATUS "[CPackSimple] ${outvar} = ${ARGN}")
		endif()
	endif()
endmacro()

macro(cpack_simple_eval _result _value)
    # Copyright 2015 by Florian Franzen
    set(${_result} ${_value} ${ARGN})
endmacro()

# cpack_simple_stack(<list> PUSH <element> [PARENT_SCOPE])
# cpack_simple_stack(<list> POP [PARENT_SCOPE])
# cpack_simple_stack(<list> TOP <output variable>)
# cpack_simple_stack(<list> GET <index> <output_variable>)
macro(cpack_simple_stack listvar)
	cmake_parse_arguments(__cpack_simple_stack "PARENT_SCOPE;POP" "TOP" "PUSH;GET" ${ARGN})
	if(__cpack_simple_stack_POP)
		list(LENGTH ${listvar} __cps_length)
		math(EXPR __cps_index "${__cps_length} - 1")
		list(REMOVE_AT ${listvar} ${__cps_index})
	elseif(__cpack_simple_stack_PUSH)
		list(APPEND ${listvar} ${__cpack_simple_stack_PUSH})
	elseif(__cpack_simple_stack_TOP)
		list(LENGTH ${listvar} __cps_length)
		math(EXPR __cps_index "${__cps_length} - 1")
		if (${__cps_index} GREATER_EQUAL 0)
			list(GET ${listvar} ${__cps_index} ${__cpack_simple_stack_TOP})
			if(__cpack_simple_stack_PARENT_SCOPE)
				set(${__cpack_simple_stack_LAST} ${${__cpack_simple_stack_TOP}} PARENT_SCOPE)
			endif()
		else()
			unset(${__cpack_simple_stack_TOP})
			if(__cpack_simple_stack_PARENT_SCOPE)
				unset(${__cpack_simple_stack_TOP} PARENT_SCOPE)
			endif()
		endif()
	elseif(__cpack_simple_stack_GET)
		FIXME()
	endif()
	
	if(__cpack_simple_stack_PARENT_SCOPE)
		set(${listvar} ${${listvar}} PARENT_SCOPE)
	endif()
endmacro()

